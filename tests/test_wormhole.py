import os
import logging

import gi
gi.require_version('Gtk', '3.0')
from twisted.internet import gtk3reactor
gtk3reactor.install()

from twisted.internet import reactor

from keysign.gpgmeh import openpgpkey_from_data
from keysign.wormholeoffer import WormholeOffer
from keysign.wormholereceive import WormholeReceive
from keysign.gpgmh import get_public_key_data
from nose.tools import *


log = logging.getLogger(__name__)
thisdir = os.path.dirname(os.path.realpath(__file__))
parentdir = os.path.join(thisdir, "..")


def get_fixture_dir(fixture=""):
    dname = os.path.join(thisdir, "fixtures", fixture)
    return dname


def get_fixture_file(fixture):
    fname = os.path.join(get_fixture_dir(), fixture)
    return fname


def read_fixture_file(fixture):
    fname = get_fixture_file(fixture)
    data = open(fname, 'rb').read()
    return data


def stop_reactor():
    reactor.callFromThread(reactor.stop)


class TestWormholeTransfer:
    def setup(self):
        data = read_fixture_file("seckey-no-pw-1.asc")
        self.key = openpgpkey_from_data(data)
        # Start offering the key
        self.worm_offer = WormholeOffer(self.key, callback_code=self._callback_code)
        self.worm_offer.start()

    def _callback_code(self, code, data):
        # We start wormhole receive with the code generated by offer
        self.worm_receive = WormholeReceive(code, self._callback_receive)
        self.worm_receive.start()

    def _callback_receive(self, downloaded_key_data):
        file_key_data = get_public_key_data(self.key.fingerprint)
        assert_equals(file_key_data, downloaded_key_data)
        self.worm_offer.stop()
        self.worm_receive.stop()
        # The last test should stop the reactor for let it close
        stop_reactor()


class TestWormholeOfflineCode:
    def setup(self):
        data = read_fixture_file("seckey-no-pw-1.asc")
        self.key = openpgpkey_from_data(data)
        code = "55-penguin-paw-print"
        # Start offering the key
        self.worm_offer = WormholeOffer(self.key, code=code)
        self.worm_offer.start()
        # Start receiving the key
        self.worm_receive = WormholeReceive(code, self._callback_receive)
        self.worm_receive.start()

    def _callback_receive(self, downloaded_key_data):
        file_key_data = get_public_key_data(self.key.fingerprint)
        assert_equals(file_key_data, downloaded_key_data)
        self.worm_offer.stop()
        self.worm_receive.stop()


if __name__ == "__main__":
    # FIXME find a better way to initialize every tests
    logging.basicConfig(level=logging.DEBUG)
    worm = TestWormholeTransfer()
    worm.setup()
    reactor.run()
